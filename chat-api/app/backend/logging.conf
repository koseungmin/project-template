# 로깅 레벨 우선순위 설명:
# logger_root (전체) ← 최상위 제한
#     ↓
# handler_logfile (파일)
#     ↓  
# handler_logconsole (콘솔)
#
# 규칙: 상위 레벨이 하위 레벨을 제한 (하위 레벨이 상위 레벨을 허용할 수는 없음)
# 예시: logger_root=INFO, handler_logconsole=DEBUG → DEBUG 출력 안됨 ❌
#      logger_root=DEBUG, handler_logconsole=INFO → INFO 이상 출력됨 ✅
#
# 로깅 레벨 출력 순서 (낮은 숫자 = 높은 우선순위):
# CRITICAL = 50 (가장 높음)
# ERROR    = 40
# WARNING  = 30
# INFO     = 20
# DEBUG    = 10 (가장 낮음)
#
# 설정된 레벨 이상의 모든 로그가 출력됨:
# DEBUG=10  → DEBUG, INFO, WARNING, ERROR, CRITICAL 모두 출력
# INFO=20   → INFO, WARNING, ERROR, CRITICAL 출력 (DEBUG 제외)
# WARNING=30 → WARNING, ERROR, CRITICAL 출력 (DEBUG, INFO 제외)

[loggers]
keys=root

[handlers]
keys=logfile,logconsole

[formatters]
keys=logformatter, colored

[logger_root]
level=DEBUG  # 전체 애플리케이션의 최소 로깅 레벨 (DEBUG 이상만 출력)
handlers=logfile, logconsole

[formatter_logformatter]
format=[%(asctime)s.%(msecs)03d] %(levelname)s [%(thread)d] - %(message)s

[formatter_colored]
class=coloredlogs.ColoredFormatter
datefmt=%Y-%m-%d %H:%M:%S
format=%(asctime)s.%(msecs)03d %(levelname)-5s %(process)5d --- [%(funcName)20s] %(name)-40s : %(message)s

[handler_logfile]
class=handlers.RotatingFileHandler
level=DEBUG  # 파일에 기록할 최소 로깅 레벨 (logfile.log에 저장)
args=('logfile.log','a')
formatter=logformatter

[handler_logconsole]
class=handlers.logging.StreamHandler
level=DEBUG  # 콘솔에 출력할 최소 로깅 레벨 (터미널/IDE 콘솔에 표시)
args=()
formatter=colored